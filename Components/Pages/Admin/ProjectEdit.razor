@page "/Admin/Projects/Edit"
@attribute [Authorize(Roles = "Admin")]
@inject IDialogService DialogService

<MudDataGrid T="Project" MultiSelection="true" Items="PortfolioData.Projects" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Projects</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Title" Title="Title" />
        <PropertyColumn Property="x => x.Visible" />
        <PropertyColumn Property="x => x.PublishDate" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Featured" />
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="@((e) => { _ = ShowConfirmationDialog(context.Item.Id); })">Delete</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Project" />
    </PagerContent>
</MudDataGrid>

@code {
    [CascadingParameter] PortfolioData PortfolioData { get; set; }
    [Inject] IProjectRepository ProjectRepository { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<Project, object> _sortBy => x => {
        if (_sortNameByLength)
            return x.Title.Length;
        else
            return x.Title;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Project, bool> _quickFilter => x => {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    void RowClicked(DataGridRowClickEventArgs<Project> args) {
        NavigationManager.NavigateTo("Admin/Projects/Edit/" + args.Item.UrlHandle);
    }
    async Task ShowConfirmationDialog(Guid projectId) {
        var project = PortfolioData.Projects.FirstOrDefault(x => x.Id == projectId);
        var parameters = new DialogParameters<DeleteProjectConfirmation> { { x => x.Project, project } };
        var dialog = await DialogService.ShowAsync<DeleteProjectConfirmation>($"Delete {project?.Title}?", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            await ProjectRepository.DeleteAsync(projectId);
        }
    }
}